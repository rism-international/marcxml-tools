#!/usr/bin/env ruby
require 'rubygems'
require 'yaml'
require 'nokogiri'
require 'trollop'
require 'ruby-progressbar'
require 'rbconfig'
require 'zip'


#OPTIONS
opts = Trollop::options do
  version "RISM splitter 1.0"
  banner <<-EOS
This utility program merges multiple MARCXML files

Usage:
   marcxml-merge [options]
where [options] are:
  EOS
  opt :infiles, "Input-Filenames", :type => :strings
  opt :outfile, "Output-Filename", :type => :string, :default => "out.xml"
  opt :size, "Amount of record", :default => 50000
end

Trollop::die :infiles, "must exist" if !opts[:infiles]
source_files=opts[:infiles]


#Helper method to parse huge files with nokogiri
def each_record(filename, &block)
  File.open(filename) do |file|
    Nokogiri::XML::Reader.from_io(file).each do |node|
      if node.name == 'record' and node.node_type == Nokogiri::XML::Reader::TYPE_ELEMENT
        yield(Nokogiri::XML(node.outer_xml, nil, "UTF-8"))
      end
    end
  end
end

ofile=File.open("#{opts[:outfile]}", "w")
ofile.write('<?xml version="1.0" encoding="UTF-8"?>'+"\n"+'<collection xmlns="http://www.loc.gov/MARC21/slim">'+"\n")
source_files.each do |source_file|
  if File.exists?(source_file)
    each_record(source_file) { |record|
      doc = Nokogiri::XML.parse(record.to_s) do |config|
        config.noblanks
      end
      ofile.write(doc.remove_namespaces!.root.to_xml :encoding => 'UTF-8')
      # IF splitting
      #break if start==100
    }
  else
    puts source_file + " is not a file!"
  end
end
ofile.write("\n</collection>")
ofile.close
puts "\nCompleted: "+Time.new.strftime("%Y-%m-%d %H:%M:%S")

