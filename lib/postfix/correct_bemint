#!/usr/bin/env ruby
require 'rubygems'
require 'yaml'
require 'nokogiri'
require 'trollop'
require 'ruby-progressbar'
require 'rbconfig'
require 'zip'
require 'pry'
require 'colorize'
require 'sqlite3'
require 'active_record'
YAML::ENGINE.yamler='psych'
NAMESPACE={'marc' => "http://www.loc.gov/MARC21/slim"}
#YAML::ENGINE.yamler='syck'
#OPTIONS
opts = Trollop::options do
  version "RISM Marcxml 0.1 (2016.07)"
  banner <<-EOS
This utility program changes MARCXML nodes according to an YAML file. 
Overall required argument is -i [inputfile].

Usage:
   marcxml [-cio] [-aftmrsd] [--with-content --with-linked --with-disjunct --zip --with-limit]
where [options] are:
  EOS
  opt :infile, "Input-Filename", :type => :strings, :short => "-i"
  opt :outfile, "Output-Filename", :type => :string, :default => "out.xml", :short => '-o'
end

Dir['/home/dev/projects/marcxml-tools/lib/*.rb'].each do |file| 
  require file 
end

ActiveRecord::Base.establish_connection(
    adapter: 'sqlite3',
    database: 'test.db'
)
class Bemint < ActiveRecord::Base
end


if opts[:infile].size == 1
  source_file = opts[:infile].first
end

ofile=File.open(opts[:outfile], "w")

#total = 1070000

#bar = ProgressBar.create(title: "Found", :format => "%c of %C Records parsed. -- %a | %B | %p%% %e".yellow, total: total, remainder_mark: '-', progress_mark: '#')

result = {}

if source_file
  #Start reading stream
  xmlstream = Marcxml::Xmlstream.new(ofile)
  xmlstream.each_record(source_file) do |record|
    isn=record.xpath("//marc:controlfield[@tag='001']", NAMESPACE).first.content rescue next
    next if isn =~ /^989/ || isn =~ /^0000099/
    kallistox = Bemint.where(:isn => isn)
    next if kallistox.empty?
    bemuebs=record.xpath("//marc:datafield[@tag='500']/marc:subfield[@code='a']", NAMESPACE)
    bemuebs.each do |bemueb|
      kallistox.each do |kallisto|
        #if kallisto.bemtext == bemueb.content
        next unless kallisto.bemtext
        if bemueb.content == kallisto.bemtext.encode("iso-8859-1").force_encoding("utf-8")
          puts "#{kallisto.bemtext.encode("iso-8859-1").force_encoding("utf-8")} == #{bemueb.content}"
          if result[isn]
            result[isn] << bemueb.content
          else
            result[isn] = [ bemueb.content ]
          end
        end
      end
    end
  end
end 

if ofile
  ofile.write(Hash[result.sort].to_yaml)
  ofile.close
  puts "\nCompleted!".green
else
  puts source_file + " is not a file!".red
end

