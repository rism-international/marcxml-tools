#!/usr/bin/env ruby
require 'rubygems'
require 'yaml'
require 'nokogiri'
require 'trollop'
require 'ruby-progressbar'
require 'rbconfig'
require 'zip'
require 'pry'
require 'colorize'
#require 'sqlite3'
require 'active_record'
YAML::ENGINE.yamler='psych'
NAMESPACE={'marc' => "http://www.loc.gov/MARC21/slim"}

opts = Trollop::options do
  version "RISM Marcxml 0.1 (2016.07)"
  banner <<-EOS
This utility program changes MARCXML nodes according to an YAML file. 
Overall required argument is -i [inputfile].

Usage:
   marcxml [-cio] [-aftmrsd] [--with-content --with-linked --with-disjunct --zip --with-limit]
where [options] are:
  EOS
  opt :infile, "Input-Filename", :type => :strings, :short => "-i"
  opt :outfile, "Output-Filename", :type => :string, :default => "out.xml", :short => '-o'
end

Dir['/home/dev/projects/marcxml-tools/lib/*.rb'].each do |file| 
  require file 
end

#connection = OracleDB.new.connection
if opts[:infile].size == 1
  source_file = opts[:infile].first
end

ofile=File.open(opts[:outfile], "w")

total = 1050000

bar = ProgressBar.create(title: "Found", :format => "%c of %C Records parsed. -- %a | %B | %p%% %e".yellow, total: total, remainder_mark: '-', progress_mark: '#')

#result = {}

#curs = connection.exec("select rismnr, bembes from hspr01 where bembes is not NULL and rismnr is not NULL")

#while db = curs.fetch_hash
#  content = (db['BEMBES']).encode("iso-8859-1").force_encoding("utf-8")
#  content.encode!('UTF-8', 'UTF-8', :invalid => :replace)
#  result[db['RISMNR']] = content.gsub("\n", ' ').gsub("\r", " ")
#end

#bembes = File.open("bembes.yml", "w")
#bembes.write(Hash[result.sort].to_yaml)

result = YAML.load_file("bembes.yml")

temp = {}

if source_file
  #Start reading stream
  xmlstream = Marcxml::Xmlstream.new(ofile)
  xmlstream.each_record(source_file) do |record|
    bar.increment
    isn=record.xpath("//marc:controlfield[@tag='001']", NAMESPACE).first.content rescue next
    next unless result[isn] 
    next if isn =~ /^989/ || isn =~ /^0000099/
    bemuebs=record.xpath("//marc:datafield[@tag='500']/marc:subfield[@code='a']", NAMESPACE)

    #no existent bemueb and bembes not in record
    if bemuebs.empty?
      temp[isn] = {'add' => result[isn]}
      next
    end

    bemuebs_content = bemuebs.map {|b| b.content}
    existent = bemuebs_content.any? { |val| /^Comment on scoring/ =~ val  }
    material = false
    bemuebs.each do |bemueb|
      if !existent
        temp[isn] = {'add' => result[isn]}
        break
      end
      material = bemueb.xpath("../marc:subfield[@code='8']", NAMESPACE).empty? ? false : true
      #bembes in record but in material
      if bemueb.content.start_with?("Comment on scoring") && material
        binding.pry
        temp[isn] = {'remove_material' => bemueb.content}
        break
      end
    end
  end
end


if ofile
  ofile.write(Hash[temp.sort].to_yaml)
  ofile.close
  puts "\nCompleted!".green
else
  puts source_file + " is not a file!".red
end

